{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Pick_TenantConfig.Exclude_keyofTenantConfig.walletConfig__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"connectionImageUrl": {
						"type": "string"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TenantConfig.walletConfig_": {
				"$ref": "#/components/schemas/Pick_TenantConfig.Exclude_keyofTenantConfig.walletConfig__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"TenantApiConfig": {
				"$ref": "#/components/schemas/Omit_TenantConfig.walletConfig_"
			},
			"RecordId": {
				"type": "string",
				"example": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e"
			},
			"TenantsRecord": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/RecordId"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"type": "string"
					},
					"storageVersion": {
						"type": "string"
					},
					"config": {
						"$ref": "#/components/schemas/TenantApiConfig"
					}
				},
				"required": [
					"id",
					"createdAt",
					"type",
					"storageVersion",
					"config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateTenantOptions": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/Omit_TenantConfig.walletConfig_"
					}
				},
				"required": [
					"config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialSupportedBrief": {
				"properties": {
					"cryptographic_binding_methods_supported": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"cryptographic_suites_supported": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"OID4VCICredentialFormat": {
				"type": "string",
				"enum": [
					"jwt_vc_json",
					"jwt_vc_json-ld",
					"ldp_vc",
					"vc+sd-jwt",
					"jwt_vc"
				]
			},
			"NameAndLocale": {
				"properties": {
					"name": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"ImageInfo": {
				"description": "Important Note: please be aware that these Common interfaces are based on versions v1_0.11 and v1_0.09",
				"properties": {
					"url": {
						"type": "string"
					},
					"alt_text": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"LogoAndColor": {
				"properties": {
					"logo": {
						"$ref": "#/components/schemas/ImageInfo"
					},
					"description": {
						"type": "string"
					},
					"background_color": {
						"type": "string"
					},
					"text_color": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialsSupportedDisplay": {
				"allOf": [
					{
						"$ref": "#/components/schemas/NameAndLocale"
					},
					{
						"$ref": "#/components/schemas/LogoAndColor"
					},
					{
						"properties": {
							"background_image": {
								"$ref": "#/components/schemas/ImageInfo"
							},
							"name": {
								"type": "string"
							}
						},
						"required": [
							"name"
						],
						"type": "object"
					}
				]
			},
			"CommonCredentialSupported": {
				"allOf": [
					{
						"$ref": "#/components/schemas/CredentialSupportedBrief"
					},
					{
						"properties": {
							"display": {
								"items": {
									"$ref": "#/components/schemas/CredentialsSupportedDisplay"
								},
								"type": "array"
							},
							"id": {
								"type": "string"
							},
							"format": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/OID4VCICredentialFormat"
									},
									{
										"type": "string"
									}
								]
							}
						},
						"required": [
							"format"
						],
						"type": "object"
					}
				]
			},
			"CredentialSubjectDisplay": {
				"properties": {
					"mandatory": {
						"type": "boolean"
					},
					"value_type": {
						"type": "string"
					},
					"display": {
						"items": {
							"$ref": "#/components/schemas/NameAndLocale"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IssuerCredentialSubjectDisplay": {
				"allOf": [
					{
						"$ref": "#/components/schemas/CredentialSubjectDisplay"
					},
					{
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/CredentialSubjectDisplay"
						},
						"type": "object"
					}
				]
			},
			"IssuerCredentialSubject": {
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"$ref": "#/components/schemas/IssuerCredentialSubjectDisplay"
				}
			},
			"CredentialSupportedJwtVcJson": {
				"properties": {
					"types": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"credentialSubject": {
						"$ref": "#/components/schemas/IssuerCredentialSubject"
					},
					"order": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"format": {
						"type": "string",
						"enum": [
							"jwt_vc_json",
							"jwt_vc"
						]
					}
				},
				"required": [
					"types",
					"format"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICredentialContext": {
				"properties": {
					"name": {
						"type": "string"
					},
					"did": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"AdditionalClaims": {
				"$ref": "#/components/schemas/Record_string.any_"
			},
			"ICredentialContextType": {
				"anyOf": [
					{
						"allOf": [
							{
								"$ref": "#/components/schemas/ICredentialContext"
							},
							{
								"$ref": "#/components/schemas/AdditionalClaims"
							}
						]
					},
					{
						"type": "string"
					}
				]
			},
			"CredentialSupportedJwtVcJsonLdAndLdpVc": {
				"properties": {
					"types": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"@context": {
						"items": {
							"$ref": "#/components/schemas/ICredentialContextType"
						},
						"type": "array"
					},
					"credentialSubject": {
						"$ref": "#/components/schemas/IssuerCredentialSubject"
					},
					"order": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"format": {
						"type": "string",
						"enum": [
							"ldp_vc",
							"jwt_vc_json-ld"
						]
					}
				},
				"required": [
					"types",
					"@context",
					"format"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialSupportedSdJwtVc": {
				"properties": {
					"format": {
						"type": "string",
						"enum": [
							"vc+sd-jwt"
						],
						"nullable": false
					},
					"vct": {
						"type": "string"
					},
					"claims": {
						"$ref": "#/components/schemas/IssuerCredentialSubject"
					},
					"order": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"format",
					"vct"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialSupported": {
				"allOf": [
					{
						"$ref": "#/components/schemas/CommonCredentialSupported"
					},
					{
						"anyOf": [
							{
								"$ref": "#/components/schemas/CredentialSupportedJwtVcJson"
							},
							{
								"$ref": "#/components/schemas/CredentialSupportedJwtVcJsonLdAndLdpVc"
							},
							{
								"$ref": "#/components/schemas/CredentialSupportedSdJwtVc"
							}
						]
					}
				]
			},
			"OpenId4VciCredentialSupportedWithId": {
				"allOf": [
					{
						"$ref": "#/components/schemas/CredentialSupported"
					},
					{
						"properties": {
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					}
				]
			},
			"MetadataDisplay": {
				"allOf": [
					{
						"$ref": "#/components/schemas/NameAndLocale"
					},
					{
						"$ref": "#/components/schemas/LogoAndColor"
					},
					{
						"properties": {
							"name": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"OpenId4VciIssuerMetadataDisplay": {
				"$ref": "#/components/schemas/MetadataDisplay"
			},
			"OpenId4VciCreateIssuerOptions": {
				"properties": {
					"issuerId": {
						"type": "string",
						"description": "Id of the issuer, not the id of the issuer record. Will be exposed publicly"
					},
					"credentialsSupported": {
						"items": {
							"$ref": "#/components/schemas/OpenId4VciCredentialSupportedWithId"
						},
						"type": "array"
					},
					"display": {
						"items": {
							"$ref": "#/components/schemas/OpenId4VciIssuerMetadataDisplay"
						},
						"type": "array"
					}
				},
				"required": [
					"credentialsSupported"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ThreadId": {
				"type": "string",
				"example": "ea4e5e69-fc04-465a-90d2-9f8ff78aa71d"
			},
			"ProofState": {
				"description": "Present Proof protocol states as defined in RFC 0037",
				"enum": [
					"proposal-sent",
					"proposal-received",
					"request-sent",
					"request-received",
					"presentation-sent",
					"presentation-received",
					"declined",
					"abandoned",
					"done"
				],
				"type": "string"
			},
			"ProofRole": {
				"enum": [
					"verifier",
					"prover"
				],
				"type": "string"
			},
			"AutoAcceptProof": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"DidCommProofsExchangeRecord": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/RecordId"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"type": "string"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					},
					"threadId": {
						"$ref": "#/components/schemas/ThreadId"
					},
					"parentThreadId": {
						"$ref": "#/components/schemas/ThreadId"
					},
					"state": {
						"$ref": "#/components/schemas/ProofState"
					},
					"role": {
						"$ref": "#/components/schemas/ProofRole"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"errorMessage": {
						"type": "string"
					},
					"protocolVersion": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"createdAt",
					"type",
					"threadId",
					"state",
					"role",
					"protocolVersion"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProofProtocolVersion": {
				"type": "string",
				"enum": [
					"v1",
					"v2"
				]
			},
			"AnonCredsPresentationPreviewAttribute": {
				"properties": {
					"name": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"referent": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsPredicateType": {
				"type": "string",
				"enum": [
					">=",
					">",
					"<=",
					"<"
				]
			},
			"AnonCredsPresentationPreviewPredicate": {
				"properties": {
					"name": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"predicate": {
						"$ref": "#/components/schemas/AnonCredsPredicateType"
					},
					"threshold": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"credentialDefinitionId",
					"predicate",
					"threshold"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsNonRevokedInterval": {
				"properties": {
					"from": {
						"type": "number",
						"format": "double"
					},
					"to": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsProposeProofFormat": {
				"description": "Interface for creating an anoncreds proof proposal.",
				"properties": {
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/AnonCredsPresentationPreviewAttribute"
						},
						"type": "array"
					},
					"predicates": {
						"items": {
							"$ref": "#/components/schemas/AnonCredsPresentationPreviewPredicate"
						},
						"type": "array"
					},
					"nonRevokedInterval": {
						"$ref": "#/components/schemas/AnonCredsNonRevokedInterval"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ProposeProofOptions.Exclude_keyofProposeProofOptions.proofFormats-or-protocolVersion__": {
				"properties": {
					"connectionId": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"connectionId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DidCommProofsProposeProofOptions": {
				"properties": {
					"connectionId": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"protocolVersion": {
						"$ref": "#/components/schemas/ProofProtocolVersion"
					},
					"proofFormats": {
						"properties": {
							"anoncreds": {
								"$ref": "#/components/schemas/AnonCredsProposeProofFormat"
							},
							"indy": {
								"$ref": "#/components/schemas/AnonCredsProposeProofFormat"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"connectionId",
					"protocolVersion",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptAnonCredsProposalOptions": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_AcceptProofProposalOptions.Exclude_keyofAcceptProofProposalOptions.proofFormats-or-proofRecordId__": {
				"properties": {
					"goalCode": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean",
						"default": true
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DidCommProofsAcceptProposalOptions": {
				"properties": {
					"goalCode": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean",
						"default": true
					},
					"protocolVersion": {
						"$ref": "#/components/schemas/ProofProtocolVersion"
					},
					"proofFormats": {
						"properties": {
							"anoncreds": {
								"$ref": "#/components/schemas/AcceptAnonCredsProposalOptions"
							},
							"indy": {
								"$ref": "#/components/schemas/AcceptAnonCredsProposalOptions"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"protocolVersion"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PlaintextMessage": {
				"properties": {
					"@type": {
						"type": "string"
					},
					"@id": {
						"type": "string"
					},
					"~thread": {
						"properties": {
							"pthid": {
								"type": "string"
							},
							"thid": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"@type",
					"@id"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"DidCommProofsCreateRequestResponse": {
				"properties": {
					"message": {
						"$ref": "#/components/schemas/PlaintextMessage"
					},
					"proofExchange": {
						"$ref": "#/components/schemas/DidCommProofsExchangeRecord"
					}
				},
				"required": [
					"message",
					"proofExchange"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsProofRequestRestrictionOptions": {
				"properties": {
					"schema_id": {
						"type": "string"
					},
					"schema_issuer_id": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					},
					"schema_version": {
						"type": "string"
					},
					"issuer_id": {
						"type": "string"
					},
					"cred_def_id": {
						"type": "string"
					},
					"rev_reg_id": {
						"type": "string"
					},
					"schema_issuer_did": {
						"type": "string"
					},
					"issuer_did": {
						"type": "string"
					},
					"attributeValues": {
						"properties": {},
						"additionalProperties": {
							"type": "string"
						},
						"type": "object"
					},
					"attributeMarkers": {
						"properties": {},
						"additionalProperties": {
							"type": "boolean"
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRequestedAttributeOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"names": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"restrictions": {
						"items": {
							"$ref": "#/components/schemas/AnonCredsProofRequestRestrictionOptions"
						},
						"type": "array"
					},
					"non_revoked": {
						"$ref": "#/components/schemas/AnonCredsNonRevokedInterval"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRequestedPredicateOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"p_type": {
						"$ref": "#/components/schemas/AnonCredsPredicateType"
					},
					"p_value": {
						"type": "number",
						"format": "double"
					},
					"restrictions": {
						"items": {
							"$ref": "#/components/schemas/AnonCredsProofRequestRestrictionOptions"
						},
						"type": "array"
					},
					"non_revoked": {
						"$ref": "#/components/schemas/AnonCredsNonRevokedInterval"
					}
				},
				"required": [
					"name",
					"p_type",
					"p_value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRequestProofFormatOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"non_revoked": {
						"$ref": "#/components/schemas/AnonCredsNonRevokedInterval"
					},
					"requested_attributes": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/AnonCredsRequestedAttributeOptions"
						},
						"type": "object"
					},
					"requested_predicates": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/AnonCredsRequestedPredicateOptions"
						},
						"type": "object"
					}
				},
				"required": [
					"name",
					"version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CreateProofRequestOptions.Exclude_keyofCreateProofRequestOptions.proofFormats-or-protocolVersion__": {
				"properties": {
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean",
						"default": true
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DidCommProofsCreateRequestOptions": {
				"properties": {
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean",
						"default": true
					},
					"protocolVersion": {
						"$ref": "#/components/schemas/ProofProtocolVersion"
					},
					"proofFormats": {
						"properties": {
							"anoncreds": {
								"$ref": "#/components/schemas/AnonCredsRequestProofFormatOptions"
							},
							"indy": {
								"$ref": "#/components/schemas/AnonCredsRequestProofFormatOptions"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"protocolVersion",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCommProofsSendRequestOptions": {
				"properties": {
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean",
						"default": true
					},
					"protocolVersion": {
						"$ref": "#/components/schemas/ProofProtocolVersion"
					},
					"proofFormats": {
						"properties": {
							"anoncreds": {
								"$ref": "#/components/schemas/AnonCredsRequestProofFormatOptions"
							},
							"indy": {
								"$ref": "#/components/schemas/AnonCredsRequestProofFormatOptions"
							}
						},
						"type": "object"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					}
				},
				"required": [
					"protocolVersion",
					"proofFormats",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.string-or-number_": {
				"properties": {},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "number",
							"format": "double"
						}
					]
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"AnonCredsClaimRecord": {
				"$ref": "#/components/schemas/Record_string.string-or-number_"
			},
			"AnonCredsCredentialInfo": {
				"properties": {
					"credentialId": {
						"type": "string"
					},
					"attributes": {
						"$ref": "#/components/schemas/AnonCredsClaimRecord"
					},
					"schemaId": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"revocationRegistryId": {
						"type": "string",
						"nullable": true
					},
					"credentialRevocationId": {
						"type": "string",
						"nullable": true
					},
					"methodName": {
						"type": "string"
					},
					"linkSecretId": {
						"type": "string"
					}
				},
				"required": [
					"credentialId",
					"attributes",
					"schemaId",
					"credentialDefinitionId",
					"revocationRegistryId",
					"credentialRevocationId",
					"methodName",
					"linkSecretId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRequestedAttributeMatch": {
				"properties": {
					"credentialId": {
						"type": "string"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"revealed": {
						"type": "boolean"
					},
					"credentialInfo": {
						"$ref": "#/components/schemas/AnonCredsCredentialInfo"
					},
					"revoked": {
						"type": "boolean"
					}
				},
				"required": [
					"credentialId",
					"revealed",
					"credentialInfo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.AnonCredsRequestedAttributeMatch_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/AnonCredsRequestedAttributeMatch"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"AnonCredsRequestedPredicateMatch": {
				"properties": {
					"credentialId": {
						"type": "string"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"credentialInfo": {
						"$ref": "#/components/schemas/AnonCredsCredentialInfo"
					},
					"revoked": {
						"type": "boolean"
					}
				},
				"required": [
					"credentialId",
					"credentialInfo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.AnonCredsRequestedPredicateMatch_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/AnonCredsRequestedPredicateMatch"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"AnonCredsSelectedCredentials": {
				"properties": {
					"attributes": {
						"$ref": "#/components/schemas/Record_string.AnonCredsRequestedAttributeMatch_"
					},
					"predicates": {
						"$ref": "#/components/schemas/Record_string.AnonCredsRequestedPredicateMatch_"
					},
					"selfAttestedAttributes": {
						"$ref": "#/components/schemas/Record_string.string_"
					}
				},
				"required": [
					"attributes",
					"predicates",
					"selfAttestedAttributes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_AcceptProofRequestOptions.Exclude_keyofAcceptProofRequestOptions.proofFormats-or-proofRecordId__": {
				"properties": {
					"goalCode": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean",
						"default": true
					},
					"useReturnRoute": {
						"type": "boolean",
						"description": "whether to enable return routing on the send presentation message. This value only\nhas an effect for connectionless exchanges."
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DidCommProofsAcceptRequestOptions": {
				"properties": {
					"goalCode": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean",
						"default": true
					},
					"useReturnRoute": {
						"type": "boolean",
						"description": "whether to enable return routing on the send presentation message. This value only\nhas an effect for connectionless exchanges."
					},
					"proofFormats": {
						"properties": {
							"anoncreds": {
								"$ref": "#/components/schemas/AnonCredsSelectedCredentials"
							},
							"indy": {
								"$ref": "#/components/schemas/AnonCredsSelectedCredentials"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"OutOfBandRole": {
				"enum": [
					"sender",
					"receiver"
				],
				"type": "string"
			},
			"OutOfBandState": {
				"enum": [
					"initial",
					"await-response",
					"prepare-response",
					"done"
				],
				"type": "string"
			},
			"DidCommOutOfBandRecord": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/RecordId"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"type": "string"
					},
					"outOfBandInvitation": {
						"$ref": "#/components/schemas/PlaintextMessage",
						"description": "The out of band invitation"
					},
					"role": {
						"$ref": "#/components/schemas/OutOfBandRole",
						"description": "Our role in the out of band exchange"
					},
					"state": {
						"$ref": "#/components/schemas/OutOfBandState",
						"description": "State of the out of band invitation"
					},
					"alias": {
						"type": "string",
						"description": "Alias for the connection(s) created based on the out of band invitation",
						"example": "My Connection"
					},
					"reusable": {
						"type": "boolean",
						"description": "Whether the out of band invitation is reusable",
						"example": true
					},
					"autoAcceptConnection": {
						"type": "boolean",
						"description": "Whether to auto accept the out of band invitation.\nIf not defined agent config will be used.",
						"example": true
					},
					"mediatorId": {
						"$ref": "#/components/schemas/RecordId",
						"description": "Mediator used for the out of band exchange"
					},
					"reuseConnectionId": {
						"$ref": "#/components/schemas/RecordId",
						"description": "The id of the connection that was reused for the out of band exchange"
					}
				},
				"required": [
					"id",
					"createdAt",
					"type",
					"outOfBandInvitation",
					"role",
					"state",
					"reusable"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCommOutOfBandCreateInvitationResponse": {
				"properties": {
					"invitation": {
						"$ref": "#/components/schemas/PlaintextMessage"
					},
					"outOfBandRecord": {
						"$ref": "#/components/schemas/DidCommOutOfBandRecord"
					},
					"invitationUrl": {
						"type": "string"
					}
				},
				"required": [
					"invitation",
					"outOfBandRecord",
					"invitationUrl"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HandshakeProtocol": {
				"description": "Enum values should be sorted based on order of preference. Values will be\nincluded in this order when creating out of band invitations.",
				"enum": [
					"https://didcomm.org/didexchange/1.x",
					"https://didcomm.org/connections/1.x"
				],
				"type": "string"
			},
			"Pick_CreateOutOfBandInvitationConfig.Exclude_keyofCreateOutOfBandInvitationConfig.routing-or-appendedAttachments-or-messages__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					},
					"handshake": {
						"type": "boolean"
					},
					"handshakeProtocols": {
						"items": {
							"$ref": "#/components/schemas/HandshakeProtocol"
						},
						"type": "array"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DidCommOutOfBandCreateInvitationOptions": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					},
					"handshake": {
						"type": "boolean"
					},
					"handshakeProtocols": {
						"items": {
							"$ref": "#/components/schemas/HandshakeProtocol"
						},
						"type": "array"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/PlaintextMessage"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CreateLegacyInvitationConfig.Exclude_keyofCreateLegacyInvitationConfig.routing__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DidCommOutOfBandCreateLegacyConnectionInvitationOptions": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DidCommOutOfBandCreateLegacyConnectionlessInvitationOptions": {
				"properties": {
					"message": {
						"$ref": "#/components/schemas/PlaintextMessage"
					},
					"domain": {
						"type": "string"
					}
				},
				"required": [
					"message",
					"domain"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ReceiveOutOfBandInvitationConfig.Exclude_keyofReceiveOutOfBandInvitationConfig.routing__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DidCommOutOfBandReceiveInvitationOptions": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					},
					"invitation": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/PlaintextMessage"
							},
							{
								"type": "string"
							}
						]
					}
				},
				"required": [
					"invitation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Did": {
				"type": "string"
			},
			"DidCommOutOfBandAcceptInvitationOptions": {
				"properties": {
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"timeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"$ref": "#/components/schemas/Did"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialState": {
				"description": "Issue Credential states as defined in RFC 0036 and RFC 0453",
				"enum": [
					"proposal-sent",
					"proposal-received",
					"offer-sent",
					"offer-received",
					"declined",
					"request-sent",
					"request-received",
					"credential-issued",
					"credential-received",
					"done",
					"abandoned"
				],
				"type": "string"
			},
			"CredentialRole": {
				"enum": [
					"issuer",
					"holder"
				],
				"type": "string"
			},
			"AutoAcceptCredential": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"CredentialRecordBinding": {
				"properties": {
					"credentialRecordType": {
						"type": "string"
					},
					"credentialRecordId": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordType",
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialPreviewAttributeOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCommCredentialsExchangeRecord": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/RecordId"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"type": "string"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					},
					"threadId": {
						"$ref": "#/components/schemas/ThreadId"
					},
					"parentThreadId": {
						"$ref": "#/components/schemas/ThreadId"
					},
					"state": {
						"$ref": "#/components/schemas/CredentialState"
					},
					"role": {
						"$ref": "#/components/schemas/CredentialRole"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"revocationNotification": {
						"properties": {
							"comment": {
								"type": "string"
							},
							"revocationDate": {
								"type": "string",
								"format": "date-time"
							}
						},
						"required": [
							"revocationDate"
						],
						"type": "object"
					},
					"errorMessage": {
						"type": "string"
					},
					"protocolVersion": {
						"type": "string"
					},
					"credentials": {
						"items": {
							"$ref": "#/components/schemas/CredentialRecordBinding"
						},
						"type": "array"
					},
					"credentialAttributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"createdAt",
					"type",
					"threadId",
					"state",
					"role",
					"protocolVersion",
					"credentials"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialProtocolVersion": {
				"type": "string",
				"enum": [
					"v1",
					"v2"
				]
			},
			"JsonValue": {
				"anyOf": [
					{
						"type": "string"
					},
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "boolean"
					},
					{
						"$ref": "#/components/schemas/JsonObject"
					},
					{
						"$ref": "#/components/schemas/JsonArray"
					}
				],
				"nullable": true
			},
			"JsonObject": {
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"$ref": "#/components/schemas/JsonValue"
				}
			},
			"JsonArray": {
				"items": {
					"$ref": "#/components/schemas/JsonValue"
				},
				"type": "array"
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Pick_JwsGeneralFormat.Exclude_keyofJwsGeneralFormat.payload__": {
				"properties": {
					"header": {
						"$ref": "#/components/schemas/Record_string.unknown_",
						"description": "unprotected header"
					},
					"signature": {
						"type": "string",
						"description": "Base64url encoded signature"
					},
					"protected": {
						"type": "string",
						"description": "Base64url encoded protected header"
					}
				},
				"required": [
					"header",
					"signature",
					"protected"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_JwsGeneralFormat.payload_": {
				"$ref": "#/components/schemas/Pick_JwsGeneralFormat.Exclude_keyofJwsGeneralFormat.payload__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"JwsDetachedFormat": {
				"$ref": "#/components/schemas/Omit_JwsGeneralFormat.payload_"
			},
			"JwsFlattenedDetachedFormat": {
				"properties": {
					"signatures": {
						"items": {
							"$ref": "#/components/schemas/JwsDetachedFormat"
						},
						"type": "array"
					}
				},
				"required": [
					"signatures"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AttachmentData": {
				"description": "A JSON object that gives access to the actual content of the attachment",
				"properties": {
					"base64": {
						"type": "string",
						"description": "Base64-encoded data, when representing arbitrary content inline instead of via links. Optional."
					},
					"json": {
						"$ref": "#/components/schemas/JsonValue",
						"description": "Directly embedded JSON data, when representing content inline instead of via links, and when the content is natively conveyable as JSON. Optional."
					},
					"links": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of zero or more locations at which the content may be fetched. Optional."
					},
					"jws": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JwsDetachedFormat"
							},
							{
								"$ref": "#/components/schemas/JwsFlattenedDetachedFormat"
							}
						],
						"description": "A JSON Web Signature over the content of the attachment. Optional."
					},
					"sha256": {
						"type": "string",
						"description": "The hash of the content. Optional."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Attachment": {
				"description": "Represents DIDComm attachment\nhttps://github.com/hyperledger/aries-rfcs/blob/master/concepts/0017-attachments/README.md",
				"properties": {
					"id": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"description": "An optional human-readable description of the content."
					},
					"filename": {
						"type": "string",
						"description": "A hint about the name that might be used if this attachment is persisted as a file. It is not required, and need not be unique. If this field is present and mime-type is not, the extension on the filename may be used to infer a MIME type."
					},
					"mimeType": {
						"type": "string",
						"description": "Describes the MIME type of the attached content. Optional but recommended."
					},
					"lastmodTime": {
						"type": "string",
						"format": "date-time",
						"description": "A hint about when the content in this attachment was last modified."
					},
					"byteCount": {
						"type": "number",
						"format": "double",
						"description": "Optional, and mostly relevant when content is included by reference instead of by value. Lets the receiver guess how expensive it will be, in time, bandwidth, and storage, to fully fetch the attachment."
					},
					"data": {
						"$ref": "#/components/schemas/AttachmentData"
					}
				},
				"required": [
					"id",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LinkedAttachment": {
				"properties": {
					"attributeName": {
						"type": "string",
						"description": "The name that will be used to generate the linked credential"
					},
					"attachment": {
						"$ref": "#/components/schemas/Attachment",
						"description": "The attachment that needs to be linked to the credential"
					}
				},
				"required": [
					"attributeName",
					"attachment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsProposeCredentialFormat": {
				"description": "This defines the module payload for calling CredentialsApi.createProposal\nor CredentialsApi.negotiateOffer",
				"properties": {
					"schemaIssuerId": {
						"type": "string"
					},
					"schemaId": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					},
					"schemaVersion": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"issuerId": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					},
					"schemaIssuerDid": {
						"type": "string"
					},
					"issuerDid": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_AnonCredsProposeCredentialFormat.Exclude_keyofAnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId__": {
				"properties": {
					"schemaId": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					},
					"schemaVersion": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					},
					"schemaIssuerDid": {
						"type": "string"
					},
					"issuerDid": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_AnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId_": {
				"$ref": "#/components/schemas/Pick_AnonCredsProposeCredentialFormat.Exclude_keyofAnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"LegacyIndyProposeCredentialFormat": {
				"$ref": "#/components/schemas/Omit_AnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId_",
				"description": "This defines the module payload for calling CredentialsApi.createProposal\nor CredentialsApi.negotiateOffer\n\nNOTE: This doesn't include the `issuerId` and `schemaIssuerId` properties that are present in the newer format."
			},
			"ProposeCredentialOptions": {
				"properties": {
					"protocolVersion": {
						"$ref": "#/components/schemas/CredentialProtocolVersion"
					},
					"credentialFormats": {
						"properties": {
							"indy": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/AnonCredsProposeCredentialFormat"
									},
									{
										"$ref": "#/components/schemas/LegacyIndyProposeCredentialFormat"
									}
								]
							},
							"anoncreds": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/AnonCredsProposeCredentialFormat"
									},
									{
										"$ref": "#/components/schemas/LegacyIndyProposeCredentialFormat"
									}
								]
							}
						},
						"type": "object"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsAcceptProposalFormat": {
				"description": "This defines the module payload for calling CredentialsApi.acceptProposal",
				"properties": {
					"credentialDefinitionId": {
						"type": "string"
					},
					"revocationRegistryDefinitionId": {
						"type": "string"
					},
					"revocationRegistryIndex": {
						"type": "number",
						"format": "double"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AcceptCredentialProposalOptions": {
				"properties": {
					"credentialFormats": {
						"properties": {
							"indy": {
								"$ref": "#/components/schemas/AnonCredsAcceptProposalFormat"
							},
							"anoncreds": {
								"$ref": "#/components/schemas/AnonCredsAcceptProposalFormat"
							}
						},
						"type": "object"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DidCommCredentialsCreateOfferResponse": {
				"properties": {
					"message": {
						"$ref": "#/components/schemas/PlaintextMessage"
					},
					"credentialExchange": {
						"$ref": "#/components/schemas/DidCommCredentialsExchangeRecord"
					}
				},
				"required": [
					"message",
					"credentialExchange"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsOfferCredentialFormat": {
				"description": "This defines the module payload for calling CredentialsApi.offerCredential\nor CredentialsApi.negotiateProposal",
				"properties": {
					"credentialDefinitionId": {
						"type": "string"
					},
					"revocationRegistryDefinitionId": {
						"type": "string"
					},
					"revocationRegistryIndex": {
						"type": "number",
						"format": "double"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"required": [
					"credentialDefinitionId",
					"attributes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.createOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"CreateOfferOptions": {
				"properties": {
					"protocolVersion": {
						"$ref": "#/components/schemas/CredentialProtocolVersion"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.createOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OfferCredentialOptions": {
				"properties": {
					"protocolVersion": {
						"$ref": "#/components/schemas/CredentialProtocolVersion"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.createOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsAcceptOfferFormat": {
				"description": "This defines the module payload for calling CredentialsApi.acceptOffer. No options are available for this\nmethod, so it's an empty object",
				"properties": {
					"linkSecretId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsAcceptOfferFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsAcceptOfferFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialOfferOptions": {
				"properties": {
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.never_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"AnonCredsAcceptRequestFormat": {
				"$ref": "#/components/schemas/Record_string.never_",
				"description": "This defines the module payload for calling CredentialsApi.acceptRequest. No options are available for this\nmethod, so it's an empty object"
			},
			"CredentialFormatPayload_CredentialFormats.acceptRequest_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsAcceptRequestFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsAcceptRequestFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialRequestOptions": {
				"properties": {
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptRequest_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DidExchangeState": {
				"description": "Connection states as defined in RFC 0023.",
				"enum": [
					"start",
					"invitation-sent",
					"invitation-received",
					"request-sent",
					"request-received",
					"response-sent",
					"response-received",
					"abandoned",
					"completed"
				],
				"type": "string"
			},
			"DidExchangeRole": {
				"enum": [
					"requester",
					"responder"
				],
				"type": "string"
			},
			"ConnectionType": {
				"enum": [
					"mediator"
				],
				"type": "string"
			},
			"DidCommConnectionsRecord": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/RecordId"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"type": "string"
					},
					"did": {
						"$ref": "#/components/schemas/Did"
					},
					"theirDid": {
						"$ref": "#/components/schemas/Did"
					},
					"theirLabel": {
						"type": "string"
					},
					"state": {
						"$ref": "#/components/schemas/DidExchangeState"
					},
					"role": {
						"$ref": "#/components/schemas/DidExchangeRole"
					},
					"alias": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"threadId": {
						"$ref": "#/components/schemas/ThreadId"
					},
					"imageUrl": {
						"type": "string"
					},
					"mediatorId": {
						"type": "string"
					},
					"errorMessage": {
						"type": "string"
					},
					"protocol": {
						"$ref": "#/components/schemas/HandshakeProtocol"
					},
					"outOfBandId": {
						"type": "string"
					},
					"invitationDid": {
						"$ref": "#/components/schemas/Did"
					},
					"connectionTypes": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ConnectionType"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array"
					},
					"previousDids": {
						"items": {
							"$ref": "#/components/schemas/Did"
						},
						"type": "array"
					},
					"previousTheirDids": {
						"items": {
							"$ref": "#/components/schemas/Did"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"createdAt",
					"type",
					"state",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BasicMessageRole": {
				"enum": [
					"sender",
					"receiver"
				],
				"type": "string"
			},
			"DidCommBasicMessagesRecord": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/RecordId"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"type": "string"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					},
					"role": {
						"$ref": "#/components/schemas/BasicMessageRole"
					},
					"content": {
						"type": "string"
					},
					"sentTime": {
						"type": "string"
					},
					"threadId": {
						"$ref": "#/components/schemas/ThreadId"
					},
					"parentThreadId": {
						"$ref": "#/components/schemas/ThreadId"
					}
				},
				"required": [
					"id",
					"createdAt",
					"type",
					"connectionId",
					"role",
					"content",
					"sentTime"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCommBasicMessagesSendOptions": {
				"properties": {
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					},
					"content": {
						"type": "string"
					},
					"parentThreadId": {
						"$ref": "#/components/schemas/ThreadId"
					}
				},
				"required": [
					"connectionId",
					"content"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidResolutionMetadata": {
				"properties": {
					"contentType": {
						"type": "string"
					},
					"error": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": [
									"invalidDid",
									"notFound",
									"representationNotSupported",
									"unsupportedDidMethod"
								]
							}
						]
					},
					"message": {
						"type": "string"
					},
					"servedFromCache": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"JsonWebKey": {
				"description": "Encapsulates a JSON web key type that includes only the public properties that\r\ncan be used in DID documents.\r\n\r\nThe private properties are intentionally omitted to discourage the use\r\n(and accidental disclosure) of private keys in DID documents.",
				"properties": {
					"alg": {
						"type": "string"
					},
					"crv": {
						"type": "string"
					},
					"e": {
						"type": "string"
					},
					"ext": {
						"type": "boolean"
					},
					"key_ops": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"kid": {
						"type": "string"
					},
					"kty": {
						"type": "string"
					},
					"n": {
						"type": "string"
					},
					"use": {
						"type": "string"
					},
					"x": {
						"type": "string"
					},
					"y": {
						"type": "string"
					}
				},
				"required": [
					"kty"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerificationMethod": {
				"description": "Represents the properties of a Verification Method listed in a DID document.\r\n\r\nThis data type includes public key representations that are no longer present in the spec but are still used by\r\nseveral DID methods / resolvers and kept for backward compatibility.",
				"properties": {
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"controller": {
						"type": "string"
					},
					"publicKeyBase58": {
						"type": "string"
					},
					"publicKeyBase64": {
						"type": "string"
					},
					"publicKeyJwk": {
						"$ref": "#/components/schemas/JsonWebKey"
					},
					"publicKeyHex": {
						"type": "string"
					},
					"publicKeyMultibase": {
						"type": "string"
					},
					"blockchainAccountId": {
						"type": "string"
					},
					"ethereumAddress": {
						"type": "string"
					},
					"conditionOr": {
						"items": {
							"$ref": "#/components/schemas/VerificationMethod"
						},
						"type": "array"
					},
					"conditionAnd": {
						"items": {
							"$ref": "#/components/schemas/VerificationMethod"
						},
						"type": "array"
					},
					"threshold": {
						"type": "number",
						"format": "double"
					},
					"conditionThreshold": {
						"items": {
							"$ref": "#/components/schemas/VerificationMethod"
						},
						"type": "array"
					},
					"conditionWeightedThreshold": {
						"items": {
							"$ref": "#/components/schemas/ConditionWeightedThreshold"
						},
						"type": "array"
					},
					"conditionDelegated": {
						"type": "string"
					},
					"relationshipParent": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"relationshipChild": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"relationshipSibling": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"type",
					"controller"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConditionWeightedThreshold": {
				"properties": {
					"condition": {
						"$ref": "#/components/schemas/VerificationMethod"
					},
					"weight": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"condition",
					"weight"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ServiceEndpoint": {
				"anyOf": [
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/Record_string.any_"
					}
				],
				"description": "Represents an endpoint of a Service entry in a DID document."
			},
			"Service": {
				"description": "Represents a Service entry in a {@link https://www.w3.org/TR/did-core/#did-document-properties DID document}.",
				"properties": {
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"serviceEndpoint": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ServiceEndpoint"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ServiceEndpoint"
								},
								"type": "array"
							}
						]
					}
				},
				"required": [
					"id",
					"type",
					"serviceEndpoint"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"DIDDocument": {
				"allOf": [
					{
						"properties": {
							"publicKey": {
								"items": {
									"$ref": "#/components/schemas/VerificationMethod"
								},
								"type": "array",
								"deprecated": true
							},
							"service": {
								"items": {
									"$ref": "#/components/schemas/Service"
								},
								"type": "array"
							},
							"verificationMethod": {
								"items": {
									"$ref": "#/components/schemas/VerificationMethod"
								},
								"type": "array"
							},
							"controller": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"items": {
											"type": "string"
										},
										"type": "array"
									}
								]
							},
							"alsoKnownAs": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"id": {
								"type": "string"
							},
							"@context": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									{
										"type": "string",
										"enum": [
											"https://www.w3.org/ns/did/v1"
										]
									}
								]
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					},
					{
						"properties": {
							"authentication": {
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/VerificationMethod"
										}
									]
								},
								"type": "array"
							},
							"assertionMethod": {
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/VerificationMethod"
										}
									]
								},
								"type": "array"
							},
							"keyAgreement": {
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/VerificationMethod"
										}
									]
								},
								"type": "array"
							},
							"capabilityInvocation": {
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/VerificationMethod"
										}
									]
								},
								"type": "array"
							},
							"capabilityDelegation": {
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/VerificationMethod"
										}
									]
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				],
				"description": "Represents a DID document."
			},
			"DidDocumentJson": {
				"$ref": "#/components/schemas/DIDDocument",
				"example": {
					"@context": [
						"https://w3id.org/did/v1",
						"https://w3id.org/security/suites/ed25519-2018/v1",
						"https://w3id.org/security/suites/x25519-2019/v1"
					],
					"id": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
					"verificationMethod": [
						{
							"id": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK#z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
							"type": "Ed25519VerificationKey2018",
							"controller": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
							"publicKeyBase58": "48GdbJyVULjHDaBNS6ct9oAGtckZUS5v8asrPzvZ7R1w"
						}
					],
					"authentication": [
						"did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK#z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
					],
					"assertionMethod": [
						"did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK#z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
					],
					"keyAgreement": [
						{
							"id": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK#z6LSj72tK8brWgZja8NLRwPigth2T9QRiG1uH9oKZuKjdh9p",
							"type": "X25519KeyAgreementKey2019",
							"controller": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
							"publicKeyBase58": "8RrinpnzRDqzUjzZuHsmNJUYbzsK1eqkQB5e5SgCvKP4"
						}
					],
					"capabilityInvocation": [
						"did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK#z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
					],
					"capabilityDelegation": [
						"did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK#z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
					]
				}
			},
			"DIDDocumentMetadata": {
				"description": "Represents metadata about the DID document resulting from a {@link Resolvable.resolve} operation.",
				"properties": {
					"created": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"deactivated": {
						"type": "boolean"
					},
					"versionId": {
						"type": "string"
					},
					"nextUpdate": {
						"type": "string"
					},
					"nextVersionId": {
						"type": "string"
					},
					"equivalentId": {
						"type": "string"
					},
					"canonicalId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DidDocumentMetadata": {
				"$ref": "#/components/schemas/DIDDocumentMetadata"
			},
			"DidResolveSuccessResponse": {
				"properties": {
					"didResolutionMetadata": {
						"$ref": "#/components/schemas/DidResolutionMetadata"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocumentJson"
					},
					"didDocumentMetadata": {
						"$ref": "#/components/schemas/DidDocumentMetadata"
					}
				},
				"required": [
					"didResolutionMetadata",
					"didDocument",
					"didDocumentMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidResolveFailedResponse": {
				"properties": {
					"didResolutionMetadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/DidResolutionMetadata"
							},
							{
								"properties": {
									"error": {
										"type": "string"
									},
									"message": {
										"type": "string"
									}
								},
								"required": [
									"error",
									"message"
								],
								"type": "object"
							}
						]
					},
					"didDocument": {
						"allOf": [
							{
								"$ref": "#/components/schemas/DidDocumentJson"
							}
						],
						"nullable": true
					},
					"didDocumentMetadata": {
						"$ref": "#/components/schemas/DidDocumentMetadata"
					}
				},
				"required": [
					"didResolutionMetadata",
					"didDocument",
					"didDocumentMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KeyType": {
				"enum": [
					"ed25519",
					"bls12381g1g2",
					"bls12381g1",
					"bls12381g2",
					"x25519",
					"p256",
					"p384",
					"p521",
					"k256"
				],
				"type": "string"
			},
			"PrivateKey": {
				"properties": {
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					},
					"privateKeyBase58": {
						"type": "string",
						"description": "Base58 encoded private key"
					}
				},
				"required": [
					"keyType",
					"privateKeyBase58"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidImportOptions": {
				"properties": {
					"did": {
						"$ref": "#/components/schemas/Did"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocumentJson"
					},
					"privateKeys": {
						"items": {
							"$ref": "#/components/schemas/PrivateKey"
						},
						"type": "array",
						"description": "Private keys to import as part of the did document"
					},
					"overwrite": {
						"type": "boolean",
						"description": "Whether to overwrite the existing did document and private keys"
					}
				},
				"required": [
					"did"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnyJsonObject": {
				"description": "JSON object that can contain any key-value pairs",
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateBaseResponse__state-finished--did-Did--didDocument-DidDocumentJson--secret_63_-AnyJsonObject__": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"didRegistrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"didDocumentMetadata": {
						"$ref": "#/components/schemas/DidResolutionMetadata"
					},
					"didState": {
						"properties": {
							"secret": {
								"$ref": "#/components/schemas/AnyJsonObject"
							},
							"didDocument": {
								"$ref": "#/components/schemas/DidDocumentJson"
							},
							"did": {
								"$ref": "#/components/schemas/Did"
							},
							"state": {
								"type": "string",
								"enum": [
									"finished"
								],
								"nullable": false
							}
						},
						"required": [
							"didDocument",
							"did",
							"state"
						],
						"type": "object"
					}
				},
				"required": [
					"didRegistrationMetadata",
					"didDocumentMetadata",
					"didState"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateFinishedResponse": {
				"$ref": "#/components/schemas/DidCreateBaseResponse__state-finished--did-Did--didDocument-DidDocumentJson--secret_63_-AnyJsonObject__"
			},
			"DidCreateBaseResponse__state-failed--did_63_-Did--didDocument_63_-DidDocumentJson--secret_63_-AnyJsonObject--reason-string__": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"didRegistrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"didDocumentMetadata": {
						"$ref": "#/components/schemas/DidResolutionMetadata"
					},
					"didState": {
						"properties": {
							"reason": {
								"type": "string"
							},
							"secret": {
								"$ref": "#/components/schemas/AnyJsonObject"
							},
							"didDocument": {
								"$ref": "#/components/schemas/DidDocumentJson"
							},
							"did": {
								"$ref": "#/components/schemas/Did"
							},
							"state": {
								"type": "string",
								"enum": [
									"failed"
								],
								"nullable": false
							}
						},
						"required": [
							"reason",
							"state"
						],
						"type": "object"
					}
				},
				"required": [
					"didRegistrationMetadata",
					"didDocumentMetadata",
					"didState"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateFailedResponse": {
				"$ref": "#/components/schemas/DidCreateBaseResponse__state-failed--did_63_-Did--didDocument_63_-DidDocumentJson--secret_63_-AnyJsonObject--reason-string__"
			},
			"DidCreateBaseResponse__state-action--action-string--did_63_-Did--didDocument_63_-DidDocumentJson--secret_63_-AnyJsonObject--_91_key-string_93__58_unknown__": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"didRegistrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"didDocumentMetadata": {
						"$ref": "#/components/schemas/DidResolutionMetadata"
					},
					"didState": {
						"properties": {
							"secret": {
								"$ref": "#/components/schemas/AnyJsonObject"
							},
							"didDocument": {
								"$ref": "#/components/schemas/DidDocumentJson"
							},
							"did": {
								"$ref": "#/components/schemas/Did"
							},
							"action": {
								"type": "string"
							},
							"state": {
								"type": "string",
								"enum": [
									"action"
								],
								"nullable": false
							}
						},
						"additionalProperties": {},
						"required": [
							"action",
							"state"
						],
						"type": "object"
					}
				},
				"required": [
					"didRegistrationMetadata",
					"didDocumentMetadata",
					"didState"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateActionResponse": {
				"$ref": "#/components/schemas/DidCreateBaseResponse__state-action--action-string--did_63_-Did--didDocument_63_-DidDocumentJson--secret_63_-AnyJsonObject--_91_key-string_93__58_unknown__"
			},
			"DidCreateBaseResponse__state-wait--did_63_-Did--didDocument_63_-DidDocumentJson--secret_63_-AnyJsonObject__": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"didRegistrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"didDocumentMetadata": {
						"$ref": "#/components/schemas/DidResolutionMetadata"
					},
					"didState": {
						"properties": {
							"secret": {
								"$ref": "#/components/schemas/AnyJsonObject"
							},
							"didDocument": {
								"$ref": "#/components/schemas/DidDocumentJson"
							},
							"did": {
								"$ref": "#/components/schemas/Did"
							},
							"state": {
								"type": "string",
								"enum": [
									"wait"
								],
								"nullable": false
							}
						},
						"required": [
							"state"
						],
						"type": "object"
					}
				},
				"required": [
					"didRegistrationMetadata",
					"didDocumentMetadata",
					"didState"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateWaitResponse": {
				"$ref": "#/components/schemas/DidCreateBaseResponse__state-wait--did_63_-Did--didDocument_63_-DidDocumentJson--secret_63_-AnyJsonObject__"
			},
			"Pick_DidCreateBaseOptions.Exclude_keyofDidCreateBaseOptions.did-or-didDocument__": {
				"properties": {
					"method": {
						"type": "string"
					},
					"options": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"secret": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"KeyOrJwkDidCreateOptions": {
				"properties": {
					"method": {
						"type": "string",
						"enum": [
							"key",
							"jwk"
						]
					},
					"options": {
						"properties": {
							"keyType": {
								"$ref": "#/components/schemas/KeyType"
							}
						},
						"required": [
							"keyType"
						],
						"type": "object"
					},
					"secret": {
						"properties": {
							"privateKeyBase58": {
								"type": "string"
							},
							"seedBase58": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"method",
					"options"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateBaseOptions": {
				"properties": {
					"method": {
						"type": "string"
					},
					"did": {
						"$ref": "#/components/schemas/Did"
					},
					"options": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"secret": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocumentJson"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateOptions": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/KeyOrJwkDidCreateOptions"
					},
					{
						"$ref": "#/components/schemas/DidCreateBaseOptions"
					}
				]
			},
			"AnonCredsSchemaId": {
				"type": "string"
			},
			"AnonCredsSchema": {
				"properties": {
					"issuerId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"attrNames": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"issuerId",
					"name",
					"version",
					"attrNames"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsGetSchemaSuccessResponse": {
				"properties": {
					"schemaId": {
						"$ref": "#/components/schemas/AnonCredsSchemaId"
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"resolutionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"schemaId",
					"schema",
					"resolutionMetadata",
					"schemaMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Required_AnonCredsResolutionMetadata_": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"additionalProperties": {},
				"required": [
					"error",
					"message"
				],
				"type": "object",
				"description": "Make all properties in T required"
			},
			"AnonCredsGetSchemaFailedResponse": {
				"properties": {
					"schemaId": {
						"$ref": "#/components/schemas/AnonCredsSchemaId"
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"resolutionMetadata": {
						"$ref": "#/components/schemas/Required_AnonCredsResolutionMetadata_"
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"schemaId",
					"resolutionMetadata",
					"schemaMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateFinished": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"finished"
						],
						"nullable": false
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"schema",
					"schemaId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterSchemaSuccessResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"schemaState": {
						"$ref": "#/components/schemas/RegisterSchemaReturnStateFinished"
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"schemaState",
					"schemaMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateFailed": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"failed"
						],
						"nullable": false
					},
					"reason": {
						"type": "string"
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterSchemaFailedResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"schemaState": {
						"$ref": "#/components/schemas/RegisterSchemaReturnStateFailed"
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"schemaState",
					"schemaMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateAction": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"action"
						],
						"nullable": false
					},
					"action": {
						"type": "string"
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"action",
					"schema",
					"schemaId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterSchemaActionResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"schemaState": {
						"$ref": "#/components/schemas/RegisterSchemaReturnStateAction"
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"schemaState",
					"schemaMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateWait": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"wait"
						],
						"nullable": false
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterSchemaWaitResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"schemaState": {
						"$ref": "#/components/schemas/RegisterSchemaReturnStateWait"
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"schemaState",
					"schemaMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterSchemaBody": {
				"properties": {
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"options": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"schema"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"schema": {
						"issuerId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv",
						"name": "schema-name",
						"version": "1.0",
						"attrNames": [
							"age"
						]
					}
				}
			},
			"AnonCredsCredentialDefinitionId": {
				"type": "string"
			},
			"AnonCredsCredentialDefinition": {
				"properties": {
					"issuerId": {
						"type": "string"
					},
					"schemaId": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"CL"
						],
						"nullable": false
					},
					"tag": {
						"type": "string"
					},
					"value": {
						"properties": {
							"revocation": {},
							"primary": {
								"$ref": "#/components/schemas/Record_string.unknown_"
							}
						},
						"required": [
							"primary"
						],
						"type": "object"
					}
				},
				"required": [
					"issuerId",
					"schemaId",
					"type",
					"tag",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsGetCredentialDefinitionSuccessResponse": {
				"properties": {
					"credentialDefinitionId": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinitionId"
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"resolutionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"credentialDefinitionId",
					"credentialDefinition",
					"resolutionMetadata",
					"credentialDefinitionMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsGetCredentialDefinitionFailedResponse": {
				"properties": {
					"credentialDefinitionId": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinitionId"
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"resolutionMetadata": {
						"$ref": "#/components/schemas/Required_AnonCredsResolutionMetadata_"
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"credentialDefinitionId",
					"resolutionMetadata",
					"credentialDefinitionMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateFinished": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"finished"
						],
						"nullable": false
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"credentialDefinitionId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"credentialDefinition",
					"credentialDefinitionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterCredentialDefinitionSuccessResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"credentialDefinitionState": {
						"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateFinished"
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"credentialDefinitionState",
					"credentialDefinitionMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateFailed": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"failed"
						],
						"nullable": false
					},
					"reason": {
						"type": "string"
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"credentialDefinitionId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterCredentialDefinitionFailedResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"credentialDefinitionState": {
						"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateFailed"
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"credentialDefinitionState",
					"credentialDefinitionMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateAction": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"action"
						],
						"nullable": false
					},
					"action": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					}
				},
				"required": [
					"state",
					"action",
					"credentialDefinitionId",
					"credentialDefinition"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterCredentialDefinitionActionResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"credentialDefinitionState": {
						"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateAction"
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"credentialDefinitionState",
					"credentialDefinitionMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateWait": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"wait"
						],
						"nullable": false
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"credentialDefinitionId": {
						"type": "string"
					}
				},
				"required": [
					"state"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterCredentialDefinitionWaitResponse": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"credentialDefinitionState": {
						"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateWait"
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/AnyJsonObject"
					}
				},
				"required": [
					"credentialDefinitionState",
					"credentialDefinitionMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterCredentialDefinitionInput": {
				"properties": {
					"issuerId": {
						"type": "string"
					},
					"schemaId": {
						"type": "string"
					},
					"tag": {
						"type": "string"
					}
				},
				"required": [
					"issuerId",
					"schemaId",
					"tag"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterCredentialDefinitionOptions": {
				"properties": {
					"supportRevocation": {
						"type": "boolean"
					}
				},
				"required": [
					"supportRevocation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsRegisterCredentialDefinitionBody": {
				"properties": {
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsRegisterCredentialDefinitionInput"
					},
					"options": {
						"$ref": "#/components/schemas/AnonCredsRegisterCredentialDefinitionOptions"
					}
				},
				"required": [
					"credentialDefinition",
					"options"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"credentialDefinition": {
						"issuerId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv",
						"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0",
						"tag": "definition"
					},
					"options": {
						"supportRevocation": true
					}
				}
			},
			"DidCommMimeType": {
				"enum": [
					"application/ssi-agent-wire",
					"application/didcomm-envelope-enc"
				],
				"type": "string"
			},
			"Pick_ReturnType_AgentConfig-at-toJSON_.Exclude_keyofReturnType_AgentConfig-at-toJSON_.walletConfig-or-logger-or-agentDependencies__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"connectionImageUrl": {
						"type": "string"
					},
					"endpoints": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"didCommMimeType": {
						"$ref": "#/components/schemas/DidCommMimeType"
					},
					"useDidKeyInProtocols": {
						"type": "boolean"
					},
					"useDidSovPrefixWhereAllowed": {
						"type": "boolean"
					},
					"autoUpdateStorageOnStartup": {
						"type": "boolean"
					},
					"backupBeforeStorageUpdate": {
						"type": "boolean"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ApiAgentConfig": {
				"properties": {
					"label": {
						"type": "string"
					},
					"connectionImageUrl": {
						"type": "string"
					},
					"endpoints": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"didCommMimeType": {
						"$ref": "#/components/schemas/DidCommMimeType"
					},
					"useDidKeyInProtocols": {
						"type": "boolean"
					},
					"useDidSovPrefixWhereAllowed": {
						"type": "boolean"
					},
					"autoUpdateStorageOnStartup": {
						"type": "boolean"
					},
					"backupBeforeStorageUpdate": {
						"type": "boolean"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AgentInfo": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/ApiAgentConfig",
						"description": "The config of the agent."
					},
					"isInitialized": {
						"type": "boolean",
						"description": "Whether the agent has been initialized."
					}
				},
				"required": [
					"config",
					"isInitialized"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"tenants": {
				"type": "apiKey",
				"name": "x-tenant-id",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "@credo-ts/rest",
		"version": "0.9.5",
		"description": "Rest API for using Credo over HTTP",
		"license": {
			"name": "Apache-2.0"
		},
		"contact": {}
	},
	"paths": {
		"/tenants": {
			"post": {
				"operationId": "CreateTenant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TenantsRecord"
								}
							}
						}
					}
				},
				"description": "create new tenant",
				"tags": [
					"Tenants"
				],
				"security": [
					{
						"tenants": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenantOptions"
							}
						}
					}
				}
			}
		},
		"/openid4vc/issuers": {
			"post": {
				"operationId": "CreateIssuer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Initiate a new openid4vc issuance session by creating a credential offer",
				"tags": [
					"OpenID4VC Issuer"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OpenId4VciCreateIssuerOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs": {
			"get": {
				"operationId": "FindProofsByQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DidCommProofsExchangeRecord"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"protocolVersion": "v2",
												"role": "prover",
												"state": "proposal-sent",
												"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"autoAcceptProof": "always",
												"type": "ProofRecord"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Find proof exchanges by query",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					},
					{
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ProofState"
						}
					},
					{
						"in": "query",
						"name": "parentThreadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					},
					{
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ProofRole"
						}
					}
				]
			}
		},
		"/didcomm/proofs/{proofExchangeId}": {
			"get": {
				"operationId": "GetProofExchangeById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCommProofsExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"protocolVersion": "v2",
											"role": "prover",
											"state": "proposal-sent",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"autoAcceptProof": "always",
											"type": "ProofRecord"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve proof exchange by proof exchange id",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteProof",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deletes a proof exchange record.",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/proofs/propose-proof": {
			"post": {
				"operationId": "ProposeProof",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCommProofsExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"protocolVersion": "v2",
											"role": "prover",
											"state": "proposal-sent",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"autoAcceptProof": "always",
											"type": "ProofRecord"
										}
									}
								}
							}
						}
					}
				},
				"description": "Initiate a new presentation exchange as prover by sending a presentation proposal request\nto the connection with the specified connection id.",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommProofsProposeProofOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/{proofExchangeId}/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCommProofsExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"protocolVersion": "v2",
											"role": "prover",
											"state": "proposal-sent",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"autoAcceptProof": "always",
											"type": "ProofRecord"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a presentation proposal as verifier by sending an accept proposal message\nto the connection associated with the proof record.",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommProofsAcceptProposalOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/create-request": {
			"post": {
				"operationId": "CreateRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCommProofsCreateRequestResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"proofExchange": {
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"protocolVersion": "v2",
												"role": "prover",
												"state": "proposal-sent",
												"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"autoAcceptProof": "always",
												"type": "ProofRecord"
											},
											"message": {
												"@id": "134b27f0-9366-4811-a36b-50bacfe57e61",
												"@type": "https://didcomm.org/present-proof/1.0/request-presentation"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a presentation request not bound to any proposal or existing connection",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommProofsCreateRequestOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/request-proof": {
			"post": {
				"operationId": "RequestProof",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"protocolVersion": "v2",
											"role": "prover",
											"state": "proposal-sent",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"autoAcceptProof": "always",
											"type": "ProofRecord"
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a presentation request bound to existing connection",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommProofsSendRequestOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/{proofExchangeId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"protocolVersion": "v2",
											"role": "prover",
											"state": "proposal-sent",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"autoAcceptProof": "always",
											"type": "ProofRecord"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a presentation request as prover by sending an accept request message\nto the connection associated with the proof record.",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommProofsAcceptRequestOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/{proofExchangeId}/accept-presentation": {
			"post": {
				"operationId": "AcceptPresentation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"protocolVersion": "v2",
											"role": "prover",
											"state": "proposal-sent",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"autoAcceptProof": "always",
											"type": "ProofRecord"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a presentation as prover by sending an accept presentation message\nto the connection associated with the proof record.",
				"tags": [
					"DIDComm Proofs"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/out-of-band": {
			"get": {
				"operationId": "FindOutOfBandRecordsByQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DidCommOutOfBandRecord"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"outOfBandInvitation": {
													"@type": "https://didcomm.org/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"role": "sender",
												"state": "prepare-response",
												"reusable": false,
												"type": "OutOfBandRecord"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all out of band records by query",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "invitationId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/OutOfBandRole"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/OutOfBandState"
						}
					},
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/out-of-band/{outOfBandId}": {
			"get": {
				"operationId": "GetOutOfBandRecordById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCommOutOfBandRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandInvitation": {
												"@type": "https://didcomm.org/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"id": "42a95528-0e30-4f86-a462-0efb02178b53",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"role": "sender",
											"state": "prepare-response",
											"reusable": false,
											"type": "OutOfBandRecord"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve an out of band record by id",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteOutOfBandRecord",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Deletes an out of band record from the repository.",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/out-of-band/create-invitation": {
			"post": {
				"operationId": "CreateInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCommOutOfBandCreateInvitationResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"invitationUrl": "https://example.com/?",
											"invitation": {
												"@type": "https://didcomm.org/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"outOfBandRecord": {
												"outOfBandInvitation": {
													"@type": "https://didcomm.org/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"role": "sender",
												"state": "prepare-response",
												"reusable": false,
												"type": "OutOfBandRecord"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates an outbound out-of-band record containing out-of-band invitation message defined in\nAries RFC 0434: Out-of-Band Protocol 1.1.",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommOutOfBandCreateInvitationOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/out-of-band/create-legacy-invitation": {
			"post": {
				"operationId": "CreateLegacyInvitation",
				"responses": {
					"200": {
						"description": "out-of-band record and invitation",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"invitation": {
												"@type": "https://didcomm.org/connections/1./invitation",
												"@id": "d6b23733-be49-408b-98ab-ba9460384087"
											},
											"outOfBandRecord": {
												"outOfBandInvitation": {
													"@type": "https://didcomm.org/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"role": "sender",
												"state": "prepare-response",
												"reusable": false,
												"type": "OutOfBandRecord"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates an outbound out-of-band record in the same way how `createInvitation` method does it,\nbut it also converts out-of-band invitation message to an \"legacy\" invitation message defined\nin RFC 0160: Connection Protocol and returns it together with out-of-band record.",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommOutOfBandCreateLegacyConnectionInvitationOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/out-of-band/create-legacy-connectionless-invitation": {
			"post": {
				"operationId": "CreateLegacyConnectionlessInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"message": {
												"@id": "eac4ff4e-b4fb-4c1d-aef3-b29c89d1cc00",
												"@type": "https://didcomm.org/issue-credential/1.0/offer-credential"
											},
											"invitationUrl": "http://example.com/invitation_url"
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a new connectionless legacy invitation.\n\nOnly works with messages created from:\n- /didcomm/credentials/create-offer\n- /didcomm/poofs/create-request",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommOutOfBandCreateLegacyConnectionlessInvitationOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/out-of-band/receive-invitation": {
			"post": {
				"operationId": "ReceiveInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"outOfBandInvitation": {
													"@type": "https://didcomm.org/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"role": "sender",
												"state": "prepare-response",
												"reusable": false,
												"type": "OutOfBandRecord"
											},
											"connectionRecord": {
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"type": "ConnectionRecord",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"state": "invitation-sent",
												"role": "responder",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Receive an out of band invitation. Supports urls as well as JSON messages. Also supports legacy\nconnection invitations",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommOutOfBandReceiveInvitationOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/out-of-band/{outOfBandId}/accept-invitation": {
			"post": {
				"operationId": "AcceptInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"outOfBandInvitation": {
													"@type": "https://didcomm.org/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"role": "sender",
												"state": "prepare-response",
												"reusable": false,
												"type": "OutOfBandRecord"
											},
											"connectionRecord": {
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"type": "ConnectionRecord",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"state": "invitation-sent",
												"role": "responder",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a connection invitation as invitee (by sending a connection request message) for the connection with the specified connection id.\nThis is not needed when auto accepting of connections is enabled.",
				"tags": [
					"DIDComm Out Of Band"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommOutOfBandAcceptInvitationOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials": {
			"get": {
				"operationId": "FindCredentialsByQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DidCommCredentialsExchangeRecord"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"credentials": [],
												"type": "CredentialRecord",
												"role": "holder",
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"state": "offer-sent",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"credentialAttributes": [],
												"protocolVersion": "v1"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all credential exchange records by query",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					},
					{
						"in": "query",
						"name": "parentThreadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					},
					{
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/CredentialState"
						}
					},
					{
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/CredentialRole"
						}
					}
				]
			}
		},
		"/didcomm/credentials/{credentialExchangeId}": {
			"get": {
				"operationId": "GetCredentialById",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"credentials": [],
											"type": "CredentialRecord",
											"role": "holder",
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"state": "offer-sent",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve credential exchange record by credential record id",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Deletes a credential exchange record in the credential repository.",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/credentials/propose-credential": {
			"post": {
				"operationId": "ProposeCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"credentials": [],
											"type": "CredentialRecord",
											"role": "holder",
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"state": "offer-sent",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as holder by sending a propose credential message\nto the connection with a specified connection id.",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProposeCredentialOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/{credentialExchangeId}/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"credentials": [],
											"type": "CredentialRecord",
											"role": "holder",
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"state": "offer-sent",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential proposal as issuer by sending an accept proposal message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialProposalOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/create-offer": {
			"post": {
				"operationId": "CreateOffer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCommCredentialsCreateOfferResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"credentialExchange": {
												"credentials": [],
												"type": "CredentialRecord",
												"role": "holder",
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"state": "offer-sent",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"credentialAttributes": [],
												"protocolVersion": "v1"
											},
											"message": {
												"@id": "134b27f0-9366-4811-a36b-50bacfe57e61",
												"@type": "https://didcomm.org/issue-credential/1.0/offer-credential"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as issuer by creating a credential offer\nwithout specifying a connection id",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOfferOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/offer-credential": {
			"post": {
				"operationId": "OfferCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"credentials": [],
											"type": "CredentialRecord",
											"role": "holder",
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"state": "offer-sent",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as issuer by sending a offer credential message\nto the connection with the specified connection id.",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OfferCredentialOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/{credentialExchangeId}/accept-offer": {
			"post": {
				"operationId": "AcceptOffer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"credentials": [],
											"type": "CredentialRecord",
											"role": "holder",
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"state": "offer-sent",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential offer as holder by sending an accept offer message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialOfferOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/{credentialExchangeId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"credentials": [],
											"type": "CredentialRecord",
											"role": "holder",
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"state": "offer-sent",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential request as issuer by sending an accept request message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialRequestOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/{credentialExchangeId}/accept-credential": {
			"post": {
				"operationId": "AcceptCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"credentials": [],
											"type": "CredentialRecord",
											"role": "holder",
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"state": "offer-sent",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential as holder by sending an accept credential message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm Credentials"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialExchangeId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/connections": {
			"get": {
				"operationId": "FindConnectionsByQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DidCommConnectionsRecord"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"type": "ConnectionRecord",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"state": "invitation-sent",
												"role": "responder",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Find connection record by query",
				"tags": [
					"DIDComm Connections"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "outOfBandId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"in": "query",
						"name": "alias",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/DidExchangeState"
						}
					},
					{
						"in": "query",
						"name": "did",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Did"
						}
					},
					{
						"in": "query",
						"name": "theirDid",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Did"
						}
					},
					{
						"in": "query",
						"name": "theirLabel",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/connections/{connectionId}": {
			"get": {
				"operationId": "GetConnectionById",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"type": "ConnectionRecord",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"state": "invitation-sent",
											"role": "responder",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve connection record by connection id",
				"tags": [
					"DIDComm Connections"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteConnection",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Deletes a connection record from the connection repository.",
				"tags": [
					"DIDComm Connections"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/connections/{connectionId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"type": "ConnectionRecord",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"state": "invitation-sent",
											"role": "responder",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a connection request as inviter by sending a connection response message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"DIDComm Connections"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/connections/{connectionId}/accept-response": {
			"post": {
				"operationId": "AcceptResponse",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"type": "ConnectionRecord",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"state": "invitation-sent",
											"role": "responder",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a connection response as invitee by sending a trust ping message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"DIDComm Connections"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/basic-messages": {
			"get": {
				"operationId": "FindBasicMessagesByQuery",
				"responses": {
					"200": {
						"description": "BasicMessageRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DidCommBasicMessagesRecord"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"id": "74bcf865-1fdc-45b4-b517-9def02dfd25f",
												"createdAt": "2022-08-18T08:38:40.216Z",
												"type": "BasicMessageRecord",
												"content": "Hello!",
												"sentTime": "2022-08-18T08:38:40.216Z",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
												"role": "sender"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve basic messages by connection id",
				"tags": [
					"DIDComm Basic Messages"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/BasicMessageRole"
						}
					},
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					},
					{
						"in": "query",
						"name": "parentThreadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					}
				]
			}
		},
		"/didcomm/basic-messages/send": {
			"post": {
				"operationId": "SendMessage",
				"responses": {
					"200": {
						"description": "BasicMessageRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": "74bcf865-1fdc-45b4-b517-9def02dfd25f",
											"createdAt": "2022-08-18T08:38:40.216Z",
											"type": "BasicMessageRecord",
											"content": "Hello!",
											"sentTime": "2022-08-18T08:38:40.216Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"role": "sender"
										}
									}
								}
							}
						}
					}
				},
				"description": "Send a basic message to a connection",
				"tags": [
					"DIDComm Basic Messages"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCommBasicMessagesSendOptions"
							}
						}
					}
				}
			}
		},
		"/dids/{did}": {
			"get": {
				"operationId": "ResolveDid",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidResolveSuccessResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"didDocument": {
												"@context": [
													"https://w3id.org/did/v1",
													"https://w3id.org/security/suites/ed25519-2018/v1",
													"https://w3id.org/security/suites/x25519-2019/v1"
												],
												"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
												"verificationMethod": [
													{
														"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"type": "Ed25519VerificationKey2018",
														"controller": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"publicKeyBase58": "6fioC1zcDPyPEL19pXRS2E4iJ46zH7xP6uSgAaPdwDrx"
													}
												],
												"authentication": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"assertionMethod": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"capabilityInvocation": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"capabilityDelegation": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"keyAgreement": [
													{
														"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6LSrdqo4M24WRDJj1h2hXxgtDTyzjjKCiyapYVgrhwZAySn",
														"type": "X25519KeyAgreementKey2019",
														"controller": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"publicKeyBase58": "FxfdY3DCQxVZddKGAtSjZdFW9bCCW7oRwZn1NFJ2Tbg2"
													}
												]
											},
											"didDocumentMetadata": {},
											"didResolutionMetadata": {
												"contentType": "application/did+ld+json"
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Did not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidResolveFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"didDocument": null,
											"didDocumentMetadata": {},
											"didResolutionMetadata": {
												"error": "notFound",
												"message": "DID not found"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Error resolving did",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidResolveFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"didDocument": null,
											"didDocumentMetadata": {},
											"didResolutionMetadata": {
												"error": "notFound",
												"message": "DID not found"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Resolves did and returns did resolution result",
				"tags": [
					"Dids"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "did",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/dids/import": {
			"post": {
				"operationId": "ImportDid",
				"responses": {
					"201": {
						"description": "Did imported successfully"
					}
				},
				"description": "Import a did (with optional did document).\n\nIf no did document is provided, the did will be resolved to fetch the did document.",
				"tags": [
					"Dids"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidImportOptions"
							}
						}
					}
				}
			}
		},
		"/dids/create": {
			"post": {
				"operationId": "CreateDid",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCreateFinishedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"didState": {
												"did": "did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc",
												"state": "finished",
												"didDocument": {
													"@context": [
														"https://w3id.org/did/v1",
														"https://w3id.org/security/suites/ed25519-2018/v1",
														"https://w3id.org/security/suites/x25519-2019/v1"
													],
													"id": "did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc",
													"verificationMethod": [
														{
															"id": "did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc#z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc",
															"type": "Ed25519VerificationKey2018",
															"controller": "did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc",
															"publicKeyBase58": "ApexJxnhZHC6Ctq4fCoNHKYgu87HuRTZ7oSyfehG57zE"
														}
													],
													"authentication": [
														"did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc#z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc"
													],
													"assertionMethod": [
														"did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc#z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc"
													],
													"keyAgreement": [
														{
															"id": "did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc#z6LSm5B4fB9NA55xB7PSeMYTMS9sf8uboJvyZBaDLLSZ7Ryd",
															"type": "X25519KeyAgreementKey2019",
															"controller": "did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc",
															"publicKeyBase58": "APzu8sLW4cND5j1g7i2W2qwPozNV6hkpgCrXqso2Q4Cs"
														}
													],
													"capabilityInvocation": [
														"did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc#z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc"
													],
													"capabilityDelegation": [
														"did:key:z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc#z6MkpGuzuD38tpgZKPfmLmmD8R6gihP9KJhuopMuVvfGzLmc"
													]
												}
											},
											"didDocumentMetadata": {},
											"didRegistrationMetadata": {}
										}
									}
								}
							}
						}
					},
					"202": {
						"description": "Wait for action to complete",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCreateWaitResponse"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"500": {
						"description": "Error creating did",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCreateFailedResponse"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Create a new did.",
				"tags": [
					"Dids"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCreateOptions"
							}
						}
					}
				}
			}
		},
		"/anoncreds/schemas/{schemaId}": {
			"get": {
				"operationId": "GetSchemaById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetSchemaSuccessResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {},
											"schemaMetadata": {},
											"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0",
											"schema": {
												"issuerId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv",
												"name": "schema-name",
												"version": "1.0",
												"attrNames": [
													"age"
												]
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid schemaId or unknown AnonCreds method provided",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetSchemaFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {
												"error": "notFound",
												"message": "Schema not found"
											},
											"schemaMetadata": {},
											"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Schema not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetSchemaFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {
												"error": "notFound",
												"message": "Schema not found"
											},
											"schemaMetadata": {},
											"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Unknown error retrieving schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetSchemaFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {
												"error": "notFound",
												"message": "Schema not found"
											},
											"schemaMetadata": {},
											"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve schema by schema id",
				"tags": [
					"AnonCreds"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AnonCredsSchemaId"
						}
					}
				]
			}
		},
		"/anoncreds/schemas": {
			"post": {
				"operationId": "RegisterSchema",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsRegisterSchemaSuccessResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"registrationMetadata": {},
											"schemaMetadata": {},
											"schemaState": {
												"state": "finished",
												"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0",
												"schema": {
													"issuerId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv",
													"name": "schema-name",
													"version": "1.0",
													"attrNames": [
														"string"
													]
												}
											}
										}
									}
								}
							}
						}
					},
					"202": {
						"description": "Wait for action to complete",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsRegisterSchemaWaitResponse"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"500": {
						"description": "Unknown error registering schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsRegisterSchemaFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"registrationMetadata": {},
											"schemaMetadata": {},
											"schemaState": {
												"state": "failed",
												"reason": "Unknown error occurred while registering schema",
												"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a new AnonCreds schema and registers the schema in the AnonCreds registry",
				"tags": [
					"AnonCreds"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AnonCredsRegisterSchemaBody"
							}
						}
					}
				}
			}
		},
		"/anoncreds/credential-definitions/{credentialDefinitionId}": {
			"get": {
				"operationId": "GetCredentialDefinitionById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetCredentialDefinitionSuccessResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {},
											"credentialDefinitionMetadata": {},
											"credentialDefinitionId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/CLAIM_DEF/20/definition",
											"credentialDefinition": {
												"issuerId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv",
												"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0",
												"type": "CL",
												"tag": "definition",
												"value": {
													"primary": {
														"n": "string",
														"s": "string",
														"r": {
															"master_secret": "string",
															"string": "string"
														},
														"rctxt": "string",
														"z": "string"
													},
													"revocation": {
														"g": "1 string",
														"g_dash": "string",
														"h": "string",
														"h0": "string",
														"h1": "string",
														"h2": "string",
														"htilde": "string",
														"h_cap": "string",
														"u": "string",
														"pk": "string",
														"y": "string"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid credentialDefinitionId or unknown AnonCreds method provided",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetCredentialDefinitionFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {
												"error": "notFound",
												"message": "CredentialDefinition not found"
											},
											"credentialDefinitionMetadata": {},
											"credentialDefinitionId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/CLAIM_DEF/20/definition"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "CredentialDefinition not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetCredentialDefinitionFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {
												"error": "notFound",
												"message": "CredentialDefinition not found"
											},
											"credentialDefinitionMetadata": {},
											"credentialDefinitionId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/CLAIM_DEF/20/definition"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Unknown error retrieving credentialDefinition",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsGetCredentialDefinitionFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"resolutionMetadata": {
												"error": "notFound",
												"message": "CredentialDefinition not found"
											},
											"credentialDefinitionMetadata": {},
											"credentialDefinitionId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/CLAIM_DEF/20/definition"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve credentialDefinition by credentialDefinition id",
				"tags": [
					"AnonCreds"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialDefinitionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/AnonCredsCredentialDefinitionId"
						}
					}
				]
			}
		},
		"/anoncreds/credential-definitions": {
			"post": {
				"operationId": "RegisterCredentialDefinition",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsRegisterCredentialDefinitionSuccessResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"registrationMetadata": {},
											"credentialDefinitionMetadata": {},
											"credentialDefinitionState": {
												"state": "finished",
												"credentialDefinitionId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/credentialDefinition-name/1.0",
												"credentialDefinition": {
													"issuerId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv",
													"schemaId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/schema-name/1.0",
													"type": "CL",
													"tag": "definition",
													"value": {
														"primary": {
															"n": "string",
															"s": "string",
															"r": {
																"master_secret": "string",
																"string": "string"
															},
															"rctxt": "string",
															"z": "string"
														},
														"revocation": {
															"g": "1 string",
															"g_dash": "string",
															"h": "string",
															"h0": "string",
															"h1": "string",
															"h2": "string",
															"htilde": "string",
															"h_cap": "string",
															"u": "string",
															"pk": "string",
															"y": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"202": {
						"description": "Wait for action to complete",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsRegisterCredentialDefinitionWaitResponse"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"500": {
						"description": "Unknown error registering credentialDefinition",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnonCredsRegisterCredentialDefinitionFailedResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"registrationMetadata": {},
											"credentialDefinitionMetadata": {},
											"credentialDefinitionState": {
												"state": "failed",
												"reason": "Unknown error occurred while registering credentialDefinition",
												"credentialDefinitionId": "did:indy:bcovrin:test:WgWxqztrNooG92RXvxSTWv/anoncreds/v0/SCHEMA/credentialDefinition-name/1.0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a new AnonCreds credentialDefinition and registers the credentialDefinition in the AnonCreds registry",
				"tags": [
					"AnonCreds"
				],
				"security": [
					{
						"tenants": [
							"tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AnonCredsRegisterCredentialDefinitionBody"
							}
						}
					}
				}
			}
		},
		"/agent": {
			"get": {
				"operationId": "GetAgentInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentInfo"
								},
								"examples": {
									"Example 1": {
										"value": {
											"config": {
												"label": "Example Agent",
												"endpoints": [
													"http://localhost:3000"
												]
											},
											"isInitialized": true
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve basic agent information",
				"tags": [
					"Agent"
				],
				"security": [
					{
						"tenants": [
							"default"
						]
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}