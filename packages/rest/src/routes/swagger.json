{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AgentInfo": {
				"properties": {
					"label": {
						"type": "string"
					},
					"endpoints": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"isInitialized": {
						"type": "boolean"
					},
					"publicDid": {
						"properties": {
							"verkey": {
								"type": "string"
							},
							"did": {
								"type": "string"
							}
						},
						"required": [
							"verkey",
							"did"
						],
						"type": "object"
					}
				},
				"required": [
					"label",
					"endpoints",
					"isInitialized"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.unknown_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"BasicMessageRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"RecordId": {
				"type": "string",
				"example": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e"
			},
			"Record_content.string_": {
				"properties": {
					"content": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Record_string.any_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ProtocolVersionType_CredentialServices_": {
				"type": "string",
				"description": "Get the supported protocol versions based on the provided credential services."
			},
			"CredentialPreviewAttributeOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JwsGeneralFormat": {
				"properties": {
					"header": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"signature": {
						"type": "string"
					},
					"protected": {
						"type": "string"
					}
				},
				"required": [
					"header",
					"signature",
					"protected"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JwsFlattenedFormat": {
				"properties": {
					"signatures": {
						"items": {
							"$ref": "#/components/schemas/JwsGeneralFormat"
						},
						"type": "array"
					}
				},
				"required": [
					"signatures"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Jws": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JwsGeneralFormat"
					},
					{
						"$ref": "#/components/schemas/JwsFlattenedFormat"
					}
				]
			},
			"AttachmentData": {
				"description": "A JSON object that gives access to the actual content of the attachment",
				"properties": {
					"base64": {
						"type": "string",
						"description": "Base64-encoded data, when representing arbitrary content inline instead of via links. Optional."
					},
					"json": {
						"$ref": "#/components/schemas/Record_string.unknown_",
						"description": "Directly embedded JSON data, when representing content inline instead of via links, and when the content is natively conveyable as JSON. Optional."
					},
					"links": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of zero or more locations at which the content may be fetched. Optional."
					},
					"jws": {
						"$ref": "#/components/schemas/Jws",
						"description": "A JSON Web Signature over the content of the attachment. Optional."
					},
					"sha256": {
						"type": "string",
						"description": "The hash of the content. Optional."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Attachment": {
				"description": "Represents DIDComm attachment\nhttps://github.com/hyperledger/aries-rfcs/blob/master/concepts/0017-attachments/README.md",
				"properties": {
					"id": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"description": "An optional human-readable description of the content."
					},
					"filename": {
						"type": "string",
						"description": "A hint about the name that might be used if this attachment is persisted as a file. It is not required, and need not be unique. If this field is present and mime-type is not, the extension on the filename may be used to infer a MIME type."
					},
					"mimeType": {
						"type": "string",
						"description": "Describes the MIME type of the attached content. Optional but recommended."
					},
					"lastmodTime": {
						"type": "string",
						"format": "date-time",
						"description": "A hint about when the content in this attachment was last modified."
					},
					"byteCount": {
						"type": "number",
						"format": "double",
						"description": "Optional, and mostly relevant when content is included by reference instead of by value. Lets the receiver guess how expensive it will be, in time, bandwidth, and storage, to fully fetch the attachment."
					},
					"data": {
						"$ref": "#/components/schemas/AttachmentData"
					}
				},
				"required": [
					"id",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LinkedAttachment": {
				"properties": {
					"attributeName": {
						"type": "string",
						"description": "The name that will be used to generate the linked credential"
					},
					"attachment": {
						"$ref": "#/components/schemas/Attachment",
						"description": "The attachment that needs to be linked to the credential"
					}
				},
				"required": [
					"attributeName",
					"attachment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IndyProposeCredentialFormat": {
				"description": "This defines the module payload for calling CredentialsModule.createProposal\nor CredentialsModule.negotiateOffer",
				"properties": {
					"schemaIssuerDid": {
						"type": "string"
					},
					"schemaId": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					},
					"schemaVersion": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"issuerDid": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.createProposal_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/IndyProposeCredentialFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AutoAcceptCredential": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"ProposeCredentialOptions": {
				"properties": {
					"protocolVersion": {
						"$ref": "#/components/schemas/ProtocolVersionType_CredentialServices_"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.createProposal_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"connectionId": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IndyAcceptProposalFormat": {
				"description": "This defines the module payload for calling CredentialsModule.acceptProposal",
				"properties": {
					"credentialDefinitionId": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptProposal_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/IndyAcceptProposalFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialProposalOptions": {
				"properties": {
					"credentialRecordId": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptProposal_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IndyOfferCredentialFormat": {
				"description": "This defines the module payload for calling CredentialsModule.offerCredential\nor CredentialsModule.negotiateProposal",
				"properties": {
					"credentialDefinitionId": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"required": [
					"credentialDefinitionId",
					"attributes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.createOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/IndyOfferCredentialFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"OfferCredentialOptions": {
				"properties": {
					"protocolVersion": {
						"$ref": "#/components/schemas/ProtocolVersionType_CredentialServices_"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.createOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"connectionId": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IndyAcceptOfferFormat": {
				"properties": {
					"holderDid": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/IndyAcceptOfferFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialOfferOptions": {
				"properties": {
					"credentialRecordId": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptRequest_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialRequestOptions": {
				"properties": {
					"credentialRecordId": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptRequest_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialDefinitionId": {
				"type": "string",
				"example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
			},
			"CredentialDefinitionRequest": {
				"properties": {
					"tag": {
						"type": "string"
					},
					"supportRevocation": {
						"type": "boolean"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"tag",
					"supportRevocation",
					"schemaId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SchemaId": {
				"type": "string",
				"example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
			},
			"SchemaRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"version",
					"attributes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PresentationPreviewAttributeOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"referent": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PredicateType": {
				"enum": [
					"<",
					"<=",
					">",
					">="
				],
				"type": "string"
			},
			"PresentationPreviewPredicateOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"predicate": {
						"$ref": "#/components/schemas/PredicateType"
					},
					"threshold": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"credentialDefinitionId",
					"predicate",
					"threshold"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AutoAcceptProof": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"ProofProposalRequest": {
				"properties": {
					"connectionId": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/PresentationPreviewAttributeOptions"
						},
						"type": "array"
					},
					"predicates": {
						"items": {
							"$ref": "#/components/schemas/PresentationPreviewPredicateOptions"
						},
						"type": "array"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"connectionId",
					"attributes",
					"predicates"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptProofProposalRequest": {
				"properties": {
					"request": {
						"properties": {
							"nonce": {
								"type": "string"
							},
							"version": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"comment": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ProofRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"ProofRequestMessageResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"proofRecord": {
						"$ref": "#/components/schemas/ProofRecord"
					}
				},
				"required": [
					"message",
					"proofRecord"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WalletQuery": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"NonRevokedInterval": {
				"properties": {
					"from": {
						"type": "number",
						"format": "double"
					},
					"to": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IndyProofRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					},
					"requested_attributes": {
						"properties": {},
						"additionalProperties": {
							"properties": {
								"non_revoked": {
									"$ref": "#/components/schemas/NonRevokedInterval"
								},
								"restrictions": {
									"items": {
										"$ref": "#/components/schemas/WalletQuery"
									},
									"type": "array"
								},
								"names": {
									"type": "string"
								},
								"name": {
									"type": "string"
								}
							},
							"type": "object"
						},
						"type": "object"
					},
					"requested_predicates": {
						"properties": {},
						"additionalProperties": {
							"properties": {
								"non_revoked": {
									"$ref": "#/components/schemas/NonRevokedInterval"
								},
								"restrictions": {
									"items": {
										"$ref": "#/components/schemas/WalletQuery"
									},
									"type": "array"
								},
								"p_value": {
									"type": "number",
									"format": "double"
								},
								"p_type": {
									"type": "string",
									"enum": [
										">=",
										">",
										"<=",
										"<"
									]
								},
								"name": {
									"type": "string"
								}
							},
							"required": [
								"p_value",
								"p_type",
								"name"
							],
							"type": "object"
						},
						"type": "object"
					},
					"non_revoked": {
						"$ref": "#/components/schemas/NonRevokedInterval"
					},
					"ver": {
						"type": "string",
						"enum": [
							"1.0",
							"2.0"
						]
					}
				},
				"required": [
					"name",
					"version",
					"nonce",
					"requested_attributes",
					"requested_predicates"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProofRequest": {
				"$ref": "#/components/schemas/IndyProofRequest",
				"description": "Proof Request for Indy based proof format"
			},
			"ProofRequestTemplate": {
				"properties": {
					"proofRequest": {
						"$ref": "#/components/schemas/ProofRequest"
					},
					"comment": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					}
				},
				"required": [
					"proofRequest"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProofPresentationRequest": {
				"properties": {
					"proofRequest": {
						"$ref": "#/components/schemas/ProofRequest"
					},
					"comment": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"connectionId": {
						"type": "string"
					}
				},
				"required": [
					"proofRequest",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PresentationProofRequest": {
				"properties": {
					"filterByPresentationPreview": {
						"type": "boolean"
					},
					"comment": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "@aries-framework/rest",
		"version": "0.8.0",
		"description": "Rest endpoint wrapper for using your agent over HTTP",
		"license": {
			"name": "Apache-2.0"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/agent": {
			"get": {
				"operationId": "GetAgentInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentInfo"
								}
							}
						}
					}
				},
				"description": "Retrieve basic agent information",
				"tags": [
					"Agent"
				],
				"security": [],
				"parameters": []
			}
		},
		"/basic-messages/{connectionId}": {
			"get": {
				"operationId": "GetBasicMessages",
				"responses": {
					"200": {
						"description": "BasicMessageRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/BasicMessageRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve basic messages by connection id",
				"tags": [
					"Basic Messages"
				],
				"security": [],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"post": {
				"operationId": "SendMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a basic message to a connection",
				"tags": [
					"Basic Messages"
				],
				"security": [],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Record_content.string_"
							}
						}
					}
				}
			}
		},
		"/connections": {
			"get": {
				"operationId": "GetAllConnections",
				"responses": {
					"200": {
						"description": "ConnectionRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.any_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve all connections records",
				"tags": [
					"Connections"
				],
				"security": [],
				"parameters": [
					{
						"description": "Alias",
						"in": "query",
						"name": "alias",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Connection state",
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "My DID",
						"in": "query",
						"name": "myDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Their DID",
						"in": "query",
						"name": "theirDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Their label",
						"in": "query",
						"name": "theirLabel",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/connections/{connectionId}": {
			"get": {
				"operationId": "GetConnectionById",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve connection record by connection id",
				"tags": [
					"Connections"
				],
				"security": [],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteConnection",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a connection record from the connection repository.",
				"tags": [
					"Connections"
				],
				"security": [],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/connections/{connectionId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a connection request as inviter by sending a connection response message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"Connections"
				],
				"security": [],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/connections/{connectionId}/accept-response": {
			"post": {
				"operationId": "AcceptResponse",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a connection response as invitee by sending a trust ping message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"Connections"
				],
				"security": [],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/credentials": {
			"get": {
				"operationId": "GetAllCredentials",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.any_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve all credential exchange records",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": []
			}
		},
		"/credentials/{credentialRecordId}": {
			"get": {
				"operationId": "GetCredentialById",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve credential exchange record by credential record id",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "credentialRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteCredential",
				"responses": {
					"204": {
						"description": "No content"
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a credential exchange record in the credential repository.",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "credentialRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/credentials/propose-credential": {
			"post": {
				"operationId": "ProposeCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as holder by sending a propose credential message\nto the connection with a specified connection id.",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProposeCredentialOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential proposal as issuer by sending an accept proposal message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialProposalOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/offer-credential": {
			"post": {
				"operationId": "OfferCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as issuer by sending a offer credential message\nto the connection with the specified connection id.",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OfferCredentialOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/accept-offer": {
			"post": {
				"operationId": "AcceptOffer",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential offer as holder by sending an accept offer message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialOfferOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential request as issuer by sending an accept request message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialRequestOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/{credentialRecordId}/accept-credential": {
			"post": {
				"operationId": "AcceptCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential as holder by sending an accept credential message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "credentialRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/credential-definitions/{credentialDefinitionId}": {
			"get": {
				"operationId": "GetCredentialDefinitionById",
				"responses": {
					"200": {
						"description": "CredDef",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve credential definition by credential definition id",
				"tags": [
					"Credential Definitions"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "credentialDefinitionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/CredentialDefinitionId"
						}
					}
				]
			}
		},
		"/credential-definitions": {
			"post": {
				"operationId": "CreateCredentialDefinition",
				"responses": {
					"200": {
						"description": "CredDef",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates a new credential definition.",
				"tags": [
					"Credential Definitions"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CredentialDefinitionRequest"
							}
						}
					}
				}
			}
		},
		"/schemas/{schemaId}": {
			"get": {
				"operationId": "GetSchemaById",
				"responses": {
					"200": {
						"description": "Schema",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve schema by schema id",
				"tags": [
					"Schemas"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/SchemaId"
						}
					}
				]
			}
		},
		"/schemas": {
			"post": {
				"operationId": "CreateSchema",
				"responses": {
					"200": {
						"description": "schema",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates a new schema and registers schema on ledger",
				"tags": [
					"Schemas"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SchemaRequest"
							}
						}
					}
				}
			}
		},
		"/proofs": {
			"get": {
				"operationId": "GetAllProofs",
				"responses": {
					"200": {
						"description": "ProofRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve all proof records",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/proofs/{proofRecordId}": {
			"get": {
				"operationId": "GetProofById",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve proof record by proof record id",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteProof",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a proof record in the proof repository.",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/proofs/propose-proof": {
			"post": {
				"operationId": "ProposeProof",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Initiate a new presentation exchange as prover by sending a presentation proposal request\nto the connection with the specified connection id.",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProofProposalRequest"
							}
						}
					}
				}
			}
		},
		"/proofs/{proofRecordId}/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a presentation proposal as verifier by sending an accept proposal message\nto the connection associated with the proof record.",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptProofProposalRequest"
							}
						}
					}
				}
			}
		},
		"/proofs/request-outofband-proof": {
			"post": {
				"operationId": "RequestProofOutOfBand",
				"responses": {
					"200": {
						"description": "ProofRequestMessageResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProofRequestMessageResponse"
								}
							}
						}
					}
				},
				"description": "Creates a presentation request not bound to any proposal or existing connection",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProofRequestTemplate"
							}
						}
					}
				}
			}
		},
		"/proofs/request-proof": {
			"post": {
				"operationId": "RequestProof",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates a presentation request bound to existing connection",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProofPresentationRequest"
							}
						}
					}
				}
			}
		},
		"/proofs/{proofRecordId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a presentation request as prover by sending an accept request message\nto the connection associated with the proof record.",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PresentationProofRequest"
							}
						}
					}
				}
			}
		},
		"/proofs/{proofRecordId}/accept-presentation": {
			"post": {
				"operationId": "AcceptPresentation",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a presentation as prover by sending an accept presentation message\nto the connection associated with the proof record.",
				"tags": [
					"Proofs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}